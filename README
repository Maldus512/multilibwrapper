
multilibwrapper allows you to have multiple instances of any shared library loaded for a single process as if by using dlmopen(), but retaining the normal interface of each library.
The tool is divided in 2 parts:
    1. A parser that reads the header files and produces the source for the wrapper of each function plus 4 functions to manage multiple loaded instances of the library. The result can then be compiled in an object file to be linked as needed.
    2. A small wrapper for pthread_create() and clone(), to be linked first in the application to manage the assignment of the parent's library instance to new threads.

INSTALL
make
sudo make install

HOWTO
Given an application that uses a certain library, the corresponding multilibwrapper can be generated and simply linked to the original code. The only mandatory requirements are:
    - the header files of said library
    - the .so file of said library
    - linking the object files with the following flags: "-ldl -lpthread" (multilibwrappers use dlmopen and thread variables to operate)

However, in applications that use threading, to make sure each new thread starts with the same library instance of its parent, you need to link the libthreadwrapper.so shared library as well (as first). To do so you need to install libthreadwrapper.so.

multilibparser is a script that parses the header files and generates the wrapper.
To use the tool call the mlgen command:
Example usage:
    mlgen multilibparser libshared.so /home/username/project/include/header2.h /home/username/project/include/header1.h

This command will generate 3 files: libshared-wrapper.c, its corrisponding object file (libshared-wrapper.o), and libshared-wrapper.h.
After this, the object file can be linked with your source and its header, and you can use it in your application.
Note that if you haven't installed it, the executable must be run with the multilib directory (or a link to it) in the current working directory.

Some examples can be found in the examples folder.


FUNCTIONS

int add_${libname}_handle()
    Adds a new library instance (and immediatly starts using it). Returns the new library descriptor, or -1 on error.

int current_${libname}_handle()
    Simply returns the current instance's descriptor.

int switch_${libname}_handle(int ld)
    Changes the library instance the process (or thread) is currently using to ld. Returns the old instance descriptor, or -1 on error.

int switch_${libname}_default_handler(int ld)
    Changes the default library instance the process is currently using to ld. Returns the old instance descriptor, or -1 on error. Only needed if not using libthreadwrapper.so.
