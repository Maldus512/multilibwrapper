#!/usr/bin/env python

#   multilibparser.py: automatically generates wrappers for shared libraries 
#
#   Copyright 2016 Mattia Maldini 
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import re
import sys
from string import Template

function =  """$ret_type $name($arguments_d){
    $ret_type (*fun)($arguments_d);
    char *error = NULL;
    int ld;
    struct lib_handle *cur;
    if ((cur = pthread_getspecific(${libname}_handle_key)) == NULL){
        cur = default_${libname}_handle;
        ld = cur->ld;
    }
    if ((fun = dlsym(cur->handle, "$name")) == NULL){
        error = dlerror();
        if (error)
            printf("%s\\n", error);
        $return;
    }
    return fun($arguments_v);
}
"""

warning = """
/************************************************
*   Automatically generated file - DO NOT EDIT  *
************************************************/
"""

def usage():
    print("usage: {} <destination path> <path to shared library> <headers to parse for functions>".format(sys.argv[0]))

#generate function definitions
def source(fun_dec):
    res = ""
    fun = Template(function)
    for f in fun_dec:
        res += fun.substitute(f)
        res += "\n"

    return res

#split argument list by ';' instead of ','
#it's needed to split the argument list while keeping intact function pointers argument list
def separate(arguments):
    inside = 0
    arguments = arguments.strip(' ')
    res = ""
    for i in range(0, len(arguments)):
        if arguments[i] == '(':
            res += arguments[i]
            inside += 1
        elif arguments[i] == ')':
            res += arguments[i]
            inside -= 1
        elif arguments[i] == ',':
            if inside == 0:
                res += ';'
            else:
                res += arguments[i]
        else:
            res += arguments[i]

    return res

            
#take only argument names, not types
def removeTypes(arguments):
    arguments = separate(arguments)
    arguments = arguments.split(';')
    found = []
    vreg = r"(\*|\s)([_A-Za-z]\w*)(\[.*\])?$"
    for arg in arguments:
        f = re.search(vreg, arg.strip(' '))
        if f:
            found.append(f.group(2))
        else:
            f = re.search(r"\(\s*\*([_A-Za-z]\w*)\s*\)\(.*\)$", arg)
            if f:
                found.append(f.group(1))
    res = ""
    for i in found:
        res += i + ", "

    res = res.strip(' ').strip(',')

    return res


#add mock names to arguments if there is only the type
def fillArgs(arguments):
    arguments = separate(arguments)
    if len(arguments) == 0 or arguments.strip(' ') == "void":
        return ''

    patch = "x"
    res = []
    arguments = arguments.split(';')
    for arg in arguments:
        f1 = re.search(r"(\*|\s)([_A-Za-z]\w*(\[.*\])?$)", arg.strip(' '))
        f2 = re.search(r"\(\s*\*([_A-Za-z]\w*)\s*\)\(.*\)$", arg.strip(' '))
        if not f1 and not f2:
            res.append( arg + " " + patch)
            patch += "x"
        else:
            res.append(arg)

    final = ""
    for arg in res:
        final += arg + ", "

    return final.strip(' ').strip(',')


#set return value for error cases (function name not found)
def returnValue(function):
    ret = function.replace("extern", "");
    if '*' in ret:
        ret = "return NULL"
    elif "struct" in ret:
        ret += " __empty_struct;\n\treturn __empty_struct";
    else:
        ret = "return ({})-1".format(ret)
    return ret

        

def main():
    dreg = r"^\s*([_A-Za-z]\w+(\s*[_A-Za-z]\w+)?\s+\*?)([_A-Za-z]\w*)\((.*)\);$"

    if len(sys.argv) < 4:
        usage()
        return

    dest = sys.argv[1].rstrip('/')

    libpath = sys.argv[2]

    headers = []
    functions = []
    content = ""
    for i in range(3, len(sys.argv)):
        headers.append(sys.argv[i])
        with open(sys.argv[i].strip(" "), "r") as f:
            content += f.read()

    declarations = re.findall(dreg, content, flags=re.MULTILINE)

    res = []
    libname = libpath.split('/')[-1].split('.')[0]
    for i in declarations:
        if i[2] in functions:
            continue
        functions.append(i[2])
        args = fillArgs(i[3])
        values = removeTypes(args)
        ret = returnValue(i[0])
        res.append({'return':ret,
                    'ret_type':i[0].replace("extern", ""),
                    'name':i[2],
                    'arguments_d':args,
                    'arguments_v':values,
                    'libname': libname.replace("lib", "")
                    })

    calls = source(res)
    includes = ""
    for i in headers:
        includes += "#include \"{}\"\n".format(i.split('/')[-1])
    
    data = {'headers': includes,
            'lib': libpath,
            'functions': calls,
            'libname': libname.replace("lib", ""),
            'LIBNAME': libname.replace("lib", "").upper(),
            'warning': warning
            }

    with open("templates/template.c", "r") as f:
        s = f.read()

    s = Template(s)
    final = s.substitute(data)

    with open("{}/{}-wrapper.c".format(dest, libname), "w") as f:
        f.write(final)


    with open("templates/template.h", "r") as f:
        s = f.read()

    s = Template(s)
    final = s.substitute(data)

    with open("{}/{}-wrapper.h".format(dest, libname), "w") as f:
        f.write(final)
    

if __name__ == '__main__':
    main()
